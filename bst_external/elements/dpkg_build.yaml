# Dpkg default configurations

variables:

  dpkg-workdir: "dpkg-build-area"
  rulesfile: "debian/rules"
  clean: "cd %{dpkg-workdir} && %{rulesfile} clean"
  build: "cd %{dpkg-workdir} && /usr/bin/make $MAKEFLAGS -f %{rulesfile} build"
  binary: "cd %{dpkg-workdir} && %{rulesfile} binary"
  prepare-dpkg-dir: |
    /bin/chmod +x debian/rules
    /bin/rm -rf .git || true
    /bin/mkdir -p %{dpkg-workdir}
    /bin/bash -O extglob -O dotglob -c "/bin/mv !(dpkg-build-area) dpkg-build-area"

  # packages' default value will be automatically replaced with
  # defaults calculated from debian/control. Replace this with a
  # space-separated list of packages to have more control over
  # what gets generated.
  #
  # e.g.
  # packages: "foo foo-dev foo-doc"
  #
  packages: <PACKAGES>
  extract-archives: |
    for package in %{packages}; do
      deb=$(echo ${package}_*.deb)
      package_dir="debian/$package"
      mkdir -p "$package_dir"
      dpkg-deb --raw-extract "$deb" "$package_dir" || true
    done
  install-packages: |
    for pkg in %{packages}; do
      cp -a debian/${pkg}/* %{install-root}
    done

  # Set this if the sources cannot handle parallelization.
  #
  # notparallel: True

config:

  # Commands for building the software
  #
  build-commands:
  - |
    %{prepare-dpkg-dir}
  - |
    %{clean}
  - |
    %{build}
  - |
    %{binary}

  # Commands for installing the software into a
  # destination folder
  #
  install-commands:
  - |
    %{extract-archives}
  - |
    %{install-packages}

  # Commands for stripping debugging information out of
  # installed binaries
  #
  strip-commands:
  - |
    %{strip-binaries}

# Use max-jobs CPUs for building and enable verbosity
environment:
  MAKEFLAGS: -j%{max-jobs}
  V: 1
  DH_VERBOSE: 1
  QUILT_PATCHES: debian/patches

# And dont consider MAKEFLAGS or V as something which may
# effect build output.
environment-nocache:
- MAKEFLAGS
- V
- DH_VERBOSE
